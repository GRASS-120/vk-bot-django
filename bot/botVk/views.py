from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse
from django.shortcuts import render
import json
import vk
import random
import sqlite3

secret_key = ""
session = vk.Session(access_token="")
vkAPI = vk.API(session)

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@csrf_exempt
def bot(request):
    body = json.loads(request.body)
    random_id = random.randint(1, 999999999999999999)
    owner_id = 

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–î
    connect = sqlite3.connect('db.sqlite')
    cur = connect.cursor()

    # print(body)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
    if body == {"type": "confirmation", "group_id": , "secret": ""}:  #–ë–µ—Ä–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ CallBack API 
        return HttpResponse("4d53ecd7")

    if body["type"] == "message_new":

        user_id = body["object"]["message"]["from_id"]
        split_body = body["object"]["message"]["text"].split(maxsplit=1)
        query_msg = cur.execute("SELECT msg FROM answer").fetchall()
        user_msg = body["object"]["message"]["text"]

        if user_msg == "/list":
            query = "SELECT * FROM answer"
            cur.execute(query)
            msg = cur.fetchall()
            send_message(user_id, msg, random_id)

        elif user_msg in query_msg[0] and user_msg == "/start":
            query = "SELECT answ FROM answer"
            cur.execute(query)
            msg = cur.fetchall()[0]
            send_message(user_id, msg, random_id)
            print(query_msg)

        elif user_msg.casefold() == '–ø—Ä–∏–≤–µ—Ç':
            msg = f"–ù—É –ø—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç, {get_user_name(user_id)} üëã"
            send_message(user_id, msg, random_id) 

        elif split_body[0] == '/say':
            text = split_body[1]
            msg = text
            send_message(user_id, msg, random_id)

        elif user_msg in query_msg[1] and user_msg == "/post":
            query = "SELECT answ FROM answer"
            cur.execute(query)
            msg = cur.fetchall()[1]
            attachment = f"wall{owner_id}_2"
            send_message(user_id, msg, random_id, attachment)

        else:
            msg = '–ß–µ—Ç –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã –º–Ω–µ –ø–∏—à–µ—à—å'
            send_message(user_id, msg, random_id)
            
    # # –°—Ç–∏–∫–µ—Ä—ã 
    # # if body["type"] == "message_new":
    # #     if body["object"]["message"]["text"] == "":
    # #         if body["object"]["message"]["attachments"][0]["type"] == "sticker":
    # #             user_id = body["object"]["message"]["from_id"]
    # #               msg = '–ß–µ —Å—Ç–∏–∫–µ—Ä—ã —à–ª–µ—à—å?! üò°'
    # #                send_message(user_id, msg, random_id)

    connect.close()
    return HttpResponse("ok")

########

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_name(user_id):
    return vkAPI.users.get(user_id=user_id, v=5.103)[0]['first_name']

# –ü–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞–µ–ª—è 
def get_user_city(user_id):
    return vkAPI.users.get(user_id=user_id, fields='city', v=5.103)[0]['city']['title']

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_message(user_id, msg, random_id, attachment=""):
    vkAPI.messages.send(user_id=user_id, message=msg, random_id=random_id, attachment=attachment, v=5.103)

         

